# Упражнение 110. Порядок сортировки
# (Решено. 22 строки)
# Напишите программу, которая будет запрашивать у пользователя целочисленные значения и сохранять их в виде списка.
# Индикатором окончания ввода значений должен служить ноль. Затем программа должна вывести на экран все введенные пользователем числа (кроме нуля) в порядке
# возрастания – по одному значению в строке. Используйте для сортировки
# либо метод sort, либо функцию sorted.

# number = float(input('Введите число: '))
# list_of_numbers = list()
#
# while number != 0:
#     list_of_numbers.append(number)
#     number = float(input('Введите число: '))
#
# for _ in range(len(list_of_numbers)):
#     for index in range(len(list_of_numbers) - 1):
#         next_value = list_of_numbers[index + 1]
#         current_value = list_of_numbers[index]
#
#         if current_value > next_value:
#             list_of_numbers[index], list_of_numbers[index + 1] = next_value, current_value

# print(list_of_numbers)

# result = sorted(list_of_numbers, reverse=True, key=round) - возвращает новое значение
# print(result)

# list_of_numbers.sort(reverse=True, key=round) - меняет текущий список
# print(list_of_numbers)

#                                       Упражнение 111. Обратный порядок
# (20 строк)
# Напишите программу, которая, как и  в  предыдущем случае, будет запрашивать у  пользователя целые числа и  сохранять их в  виде списка.
# Индикатором окончания ввода значений также должен служить ноль. На
# этот раз необходимо вывести на экран введенные значения в  порядке
# убывания.


# result = list()
#
# while True:
#     number = int(input('Введите значения: '))
#     if number == 0:
#         break
#     result.append(number)
#
# for _ in range(len(result)):
#     for index in range(len(result) - 1):
#         current_value = result[index]
#         next_value = result[index + 1]
#
#         if current_value < next_value:
#             result[index], result[index + 1] = next_value, current_value
#
# print(result)


# Упражнение 112. Удаляем выбросы
# (Решено. 44 строки)
# При анализе собранных по результатам научных экспериментов данных
# зачастую возникает необходимость избавиться от экстремальных значений, прежде чем продолжать двигаться дальше. Напишите функцию,
# создающую копию списка с исключенными из него n наибольшими и наименьшими значениями и возвращающую ее в качестве результата.
# Порядок следования элементов в измененном списке не обязательно должен
# в точности совпадать с источником.
# В основной программе должна быть продемонстрирована работа вашей
# функции. Для начала попросите пользователя ввести целые числа, затем
# соберите их в список и вызовите написанную вами ранее функцию. Выведите на экран измененную версию списка вместе с оригинальной. Если
# пользователь введет менее четырех чисел, должно быть отображено соответствующее сообщение об ошибке.

# digit_list = list()
# remove_value = int(input('Введите какое количество убирается с нибольшими и наименьшими значениями: '))
#
# if remove_value > 0:
#     while True:
#         number = input('Введите число: ')
#         if number.upper() == 'END':
#             if len(digit_list) < remove_value * 2 + 1:
#                 print('Введите больше значений!')
#                 continue
#             else:
#                 break
#         elif not number.isdigit():
#             print('Введите число или коменду "End".')
#             continue
#         digit_list.append(float(number))
#
#     for _ in range(remove_value):
#         digit_list.remove(min(digit_list))
#         digit_list.remove(max(digit_list))
#
#     print(digit_list)
# else:
#     print('Количество должно быть больше "0".')

#                                       Упражнение 113. Избавляемся от дубликатов
# (Решено. 21 строка)
# В данном упражнении вам предстоит разработать программу, в которой
# у  пользователя будет запрошен список слов, пока он не оставит строку
# ввода пустой. После этого на экране должны быть показаны слова, введенные пользователем, но без повторов, – каждое по одному разу. При этом
# слова должны быть отображены в том же порядке, в  каком их вводили
# с клавиатуры. Например, если пользователь на запрос программы введет
# следующий список слов:
# first
# second
# first
# third
# second
# программа должна вывести:
# first
# second
# third

# word_list = list()
#
# while True:
#     word = input('Введите слово: ')
#     if word == '':
#         break
#     if word in word_list:
#         continue
#     else:
#         word_list.append(word)
#
# # for word in word_list:
# #     print(word)
#
# print(*word_list, sep="\n")  # "*" распаковывает списки, кортежи, множества

# Упражнение 114. Отрицательные, положительные и нули
# (Решено. 36 строк)
# Напишите программу, запрашивающую у пользователя целые числа, пока
# он не оставит строку ввода пустой. После окончания ввода на экран должны быть выведены сначала все отрицательные числа, которые были вве-
# 100  Упражнения
# дены, затем нулевые и только после этого положительные. Внутри каждой
# группы числа должны отображаться в той последовательности, в которой
# были введены пользователем. Например, если он ввел следующие числа:
# 3, -4, 1, 0, -1, 0 и -2, вывод должен оказаться таким: -4, -1, -2, 0, 0, 3 и 1.
# Каждое значение должно отображаться на новой строке.

# negative_values, zero_values, positive_values = list(), list(), list()
#
# while True:
#     number = input('Введите целое число: ')
#     if number == '':
#         break
#     number = int(number)
#     if number < 0:
#         negative_values.append(number)
#     elif number == 0:
#         zero_values.append(number)
#     else:
#         positive_values.append(number)
#
# print(*negative_values, *zero_values, *positive_values, sep='\n')

#                                   Упражнение 115. Список собственных делителей
# (36 строк)
# Собственным делителем числа называется всякий его делитель, отличный
# от самого числа. Напишите функцию, которая будет возвращать список
# всех собственных делителей заданного числа. Само это число должно
# передаваться в  функцию в  виде единственного аргумента. Результатом
# функции будет перечень собственных делителей числа, собранных в список.
# Основная программа должна демонстрировать работу функции,
# запрашивая у пользователя число и выводя на экран список его собственных
# делителей. Программа должна запускаться только в том случае, если она
# не импортирована в виде модуля в другой файл.


# def get_division_number(number):
#     list_of_divisions = list()
#
#     for division in range(1, int(number)):
#         if number % division == 0:
#             list_of_divisions.append(division)
#     return list_of_divisions
#
#
# def get_parity_number(number):
#
#     if number % 2 == 0:
#         return True
#     return False
#
#
#
# def main():
#     number = int(input('Введите число: '))
#     result = get_parity_number(number)
#     print(result)
#
#
#
# main()


#                                               Упражнение 116. Совершенные числа
# (Решено. 35 строк)
# Целое число n называется совершенным, если сумма всех его собственных
# делителей равна самому числу n. Например, 28 – это совершенное число,
# поскольку его собственными делителями являются 1, 2, 4, 7 и 14, а 1 + 2
# + 4 + 7 + 14 = 28.
# Напишите функцию для определения того, является ли заданное число
# совершенным. Функция будет принимать на вход единственный параметр и возвращать True, если он представляет собой совершенное число,
# и  False – если нет. Разработайте небольшую программу, которая будет
# использовать функцию для идентификации и  вывода на экран всех совершенных чисел в диапазоне от 1 до 10 000. При решении этой задачи
# импортируйте функцию, написанную в упражнении 115.


# def get_division_number(number: int) -> list:
#     list_of_divisions = list()
#
#     for division in range(1, int(number)):
#         if number % division == 0:
#             list_of_divisions.append(division)
#     return list_of_divisions
#
#
# def check_for_perfection(list_of_divisions: list, number: int) -> bool:
#     sum_of_divisions = 0
#     for division in list_of_divisions:
#         sum_of_divisions += division
#     if sum_of_divisions == number:
#         return True
#
#
# def main():
#     number = int(input('Введите число для проверки на совершенность: '))
#     list_of_divisions = get_division_number(number)
#     perfection = check_for_perfection(list_of_divisions, number)
#
#     if perfection:
#         print(f'Число {number} - совершенное.')
#     else:
#         print(f'Число {number} - не совершенное.')
#
#
# main()


#                                                   Упражнение 117. Только слова
# (38 строк)
# В данном упражнении вы напишете программу, которая будет выделять
# слова из строки, введенной пользователем. Начните с создания функции,
# принимающей на вход единственный строковый параметр. В  качестве
# результата она должна возвращать список слов из строки с  удаленными знаками препинания,
# в  число которых должны входить точки, запятые, восклицательный и вопросительный знаки, дефисы, апострофы,
# двоеточия и точки с запятыми. При этом не нужно избавляться от знаков
# Списки  101
# препинания, стоящих внутри слова, таких как апостроф, служащий в английском языке для обозначения сокращений. Например, если на вход
# функции дать строку "Contractions include: don’t, isn’t, and wouldn’t.",
# функция должна вернуть следующий список: ["Contractions", "include",
# "don’t", "isn’t", "and", "wouldn’t"].
# В основной программе, как обычно, должна происходить демонстрация
# вашей функции. Запросите у  пользователя строку и  выведите на экран
# все составляющие ее слова с удаленными знаками препинания. Вам понадобятся написанные при решении заданий 118 и 167 функции, так что
# убедитесь, что основная программа выполняется только в  случае, если
# файл не импортирован в качестве модуля.


#                                               Упражнение 118. Словесные палиндромы
# (34 строки)
# В упражнениях 75 и 76 мы уже имели дело со словами, являющимися палиндромами. Тогда мы анализировали
# буквы в слове с начала и конца, игнорируя пробелы и  знаки препинания, чтобы понять, совпадает ли его
# написание в  прямом и  обратном направлениях. И  хотя палиндромами
# обычно называют слова, это понятие вполне можно расширить. Например,
# английская фраза «Is it crazy how saying sentences backwards creates backwards sentences saying how crazy it is?» является словесным палиндромом,
# поскольку если читать ее по словам, игнорируя при этом знаки препинания
# и заглавные буквы, в обоих направлениях она будет звучать одинаково. Еще
# примеры английских словесных палиндромов: «Herb the sage eats sage, the
# herb» и «Information school graduate seeks graduate school information».
# Напишите программу, которая будет запрашивать строку у пользователя и оповещать его о том, является ли она словесным палиндромом. Не
# забывайте игнорировать знаки препинания при выявлении результата.
#
#
# def translate_into_dictionary(phrase: str) -> dict:
#     phrase_dict = {symbol: phrase.count(symbol) for symbol in phrase}
#     return phrase_dict
#
#
# def second_translate_into_dictionary(second_phrase: str) -> dict:
#     phrase_dict = {symbol: second_phrase.count(symbol) for symbol in second_phrase}
#     return phrase_dict
#
#
# def check_for_palindrome(phrase: str, second_phrase: str) -> bool:
#     if translate_into_dictionary(phrase) == second_translate_into_dictionary(second_phrase):
#         return True
#     else:
#         return False
#
#
# if __name__ == '__main__':
#     phrase1 = input('Введите 1 фразу: ').upper()
#     phrase2 = input('Введите 2 фразу: ').upper()
#     if check_for_palindrome:
#         print('Фразы - полиндром')
#     else:
#         print('Фразы - не полиндром')


#                                               Упражнение 119. Ниже и выше среднего
# (44 строки)
# Напишите программу, которая будет запрашивать у  пользователя числа, пока он не пропустит ввод. Сначала на экран должно быть выведено
# среднее значение введенного ряда чисел, после этого друг за другом необходимо вывести список чисел ниже среднего, равных ему (если такие
# найдутся) и выше среднего. Каждый список должен предваряться соответствующим заголовком.

# def create_list_of_numbers() -> list:
#     list_of_numbers = list()
#     while True:
#         number = input('Введите число для списка: ')
#         if number == '':
#             break
#         list_of_numbers.append(float(number))
#     return list_of_numbers
#
#
# def main():
#     result_less, result_more, result_equal = list(), list(), list()
#     user_numbers = create_list_of_numbers()
#     average_value = sum(user_numbers) / len(user_numbers)
#
#     for number in user_numbers:
#         if number < average_value:
#             result_less.append(number)
#         elif number > average_value:
#             result_more.append(number)
#         else:
#             result_equal.append(number)
#     print(result_less)
#     print(result_more)
#     print(result_equal)
#
#
# if __name__ == '__main__':
#     main()


#                                                         Упражнение 120. Форматирование списка
# (Решено. 41 строка)
# Обычно при написании перечислений и  списков мы разделяем их элементы запятыми, а перед последним ставим союз «и», как показано ниже:
# 102  Упражнения
# яблоки
# яблоки и апельсины
# яблоки, апельсины и бананы
# яблоки, апельсины, бананы и лимоны
# Напишите функцию, которая будет принимать на вход список из строк
# и возвращать собранную строку из его элементов в описанной выше манере.
# Хотя в представленном примере количество элементов списка ограничивается четырьмя, ваша функция должна уметь обрабатывать списки
# любой длины. В основной программе запросите у пользователя несколько
# элементов списка, отформатируйте их должным образом при помощи
# функции и выведите на экран.


# def get_word_list() -> list:
#     any_list = list()
#     while True:
#         word = input('Введите слово для добавления в список: ')
#         if word == '':
#             break
#         any_list.append(word)
#     return any_list
#
#
# def convert_to_new_string(any_list: list) -> str:
#
#
# def main():
#     print(get_word_list())
#
#
# if __name__ == '__main__':
#     main()

# names = ['Андрей', 'Саша', 'Алёна', 'Самат', 'Алина', 'Ян', 'Аня', 'Олеся']
# vowels = ('а', 'у', 'е', 'о', 'э', 'я', 'и', 'ю', 'ё')  # инициализируем кортеж, содержащий все гласные на кириллице
# result = list()  # инициализируем пустой список
#
# for name in names:  # пробегаемся по списку имён names
#     count_vowels = 0  # инициализируем/обнуляем переменную, количество гласных в имени
#
#     for symbol in name:  # пробегаемся по каждому символу в name
#         if symbol.lower() in vowels:  # если символ в нижнем регистре есть в vowels
#             count_vowels += 1  # увеличиваем счётчик гласных на "1"
#
#     count_symbols = len(name)  # считаем общую длину name(количество символов)
#
#     if count_vowels > count_symbols - count_vowels:  # если количество гласных > количества согласных
#         #  ( разница между общим и гласным в имени)
#         result.append(name)  # добавляем имя в result список
#
# print(result)