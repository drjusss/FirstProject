#                                       Упражнение 35. Чет или нечет?
# (Решено. 13 строк)
# Напишите программу, запрашивающую у пользователя целое число и выводящую на экран информацию о том, является введенное число четным
# или нечетным.

# number = int(input('Введите число: '))
#
# if number % 2 == 0:
#     print(f'Число {number} - чётное.')
# else:
#     print(f'Число {number} - нечётное.')

#                                       Упражнение 36. Собачий возраст
# (22 строки)
# Считается, что один год, прожитый собакой, эквивалентен семи человеческим годам. При этом зачастую не учитывается, что собаки становятся
# абсолютно взрослыми уже к двум годам. Таким образом, многие предпочитают каждый из первых двух лет жизни собаки приравнивать к 10,5 года
# человеческой жизни, а все последующие – к четырем.
# Напишите программу, которая будет переводить человеческий возраст
# в  собачий с  учетом указанной выше логики. Убедитесь, что программа
# корректно работает при пересчете возраста собаки меньше и больше двух
# лет. Также программа должна выводить сообщение об ошибке, если пользователь ввел отрицательное число.

# age = float(input('Введите возраст собаки: '))
# first_two_years = 21
#
# if age < 0:
#     print('Собаке не может быть меньше 0 лет.')
# elif 0 < age <= 2:
#     human_age = age * 10.5
#     print(round(human_age, 1))
# else:
#     human_age = first_two_years + (age - 2) * 4
#     print(round(human_age, 1))


#                                       Упражнение 37. Гласные и согласные
# (Решено. 16 строк)
# Разработайте программу, запрашивающую у пользователя букву латинского алфавита. Если введенная буква входит в следующий список (a, e, i,
# o или u), необходимо вывести сообщение о том, что эта буква гласная. Если
# была введена буква y, программа должна написать, что эта буква может
# быть как гласной, так и согласной. Во всех других случаях должно выводиться сообщение о том, что введена согласная буква.

# letter = input('Введите латинскую букву: ')
# letter_list = ['a', 'e', 'i', 'o',  'u']
# LATIN_ALPHABET = 'abcdefghijklmnopqrstuvwxyz'  # КОНСТАНТЫ ОБОЗНАЧАЮТСЯ КАПСЛОКОМ
#
# if letter not in LATIN_ALPHABET:
#     print('Ошибка. Необходимо ввести латинскую букву')
# else:
#     if letter.lower() in letter_list:
#         print('Буква гласная')
#     elif letter.lower() == 'y':
#         print('Буква может быть как гласной, так и согласной.')
#     else:
#         print('Буква согласная.')


#                                               Упражнение 38. Угадайте фигуру
# (Решено. 31 строка)
# Напишите программу, определяющую вид фигуры по количеству ее сторон. Запросите у пользователя количество сторон и выведите сообщение
# с  указанием вида фигуры. Программа должна корректно обрабатывать
# и выводить названия для фигур с количеством сторон от трех до десяти
# включительно. Если введенное пользователем значение находится за границами этого диапазона, уведомите его об этом.

# side = input('Введите количество сторон цифрой: ')
#
# dict_of_sides = {
#     3: 'треугольник',
#     4: 'четырёхугольник',
#     5: 'пятиугольник',
#     6: 'шестиугольник',
#     7: 'семиугольник',
#     8: 'восьмиугольник',
#     9: 'девятиугольник',
#     10: 'десятиугольник',
# }
# if side.isdigit():
#     side = int(side)
#     if side in dict_of_sides.keys():
#         print(f'Фигура - {dict_of_sides[side]}')
#     else:
#         print('Введённое значение находится за границей диапазона')
# else:
#     print('Необходимо ввести значение цифрой!')

#                                   Упражнение 39. Сколько дней в месяце?
# (Решено. 18 строк)
# Количество дней в месяце варьируется от 28 до 31.
# Очередная ваша программа должна запрашивать у пользователя название месяца и отображать количество дней в нем.
# Поскольку годы мы не учитываем, для февраля можно вывести сообщение о том, что этот месяц может состоять как
# из 28, так и из 29 дней, чтобы учесть фактор високосного года.

# month_dict = {
#    1: '31 день',
#    2: '28 или 29 дней',
#    3: '31 день',
#    4: '30 дней',
#    5: '31 дней',
#    6: '30 дней',
#    7: '31 день',
#    8: '31 день',
#    9: '30 дней',
#    10: '31 день',
#    11: '30 дней',
#    12: '31 день',
# }
# while True:
#     month = float(input('Укажите месяц цифрой, чтобы узнать сколько в нём дней: '))
#     if int(month) > 12:
#         print('В году всего 12 месяцев...')
#     elif int(month) <= 0:
#         print('Отсчёт месяце ведётся с цифры "1".')
#     elif month % 1 != 0:
#         print('Укажите месяц целым числом.')
#     else:
#         break
# if int(month) in month_dict:
#     print(f'В {int(month)} месяце всего: {month_dict[int(month)]}.')

#                                               Упражнение 40. Громкость звука
#
# Создайте программу, в  которой пользователь будет вводить уровень
# шума в децибелах. Если введенное им значение будет в точности совпадать с одним из значений в приведенной таблице, необходимо вывести,
# чему соответствует указанный уровень громкости. Если значение попадет между уровнями в таблице, нужно сообщить, между какими именно.
# Также программа должна выдавать корректные сообщения, в случае если
# введенное пользователем значение окажется ниже минимального или
# больше максимального.

# volume_level = int(input('Введите уровень громкости в децибелах: '))
#
# volume_level_dict = {
#     130: 'отбойный молоток',
#     106: 'газовая газонокосилка',
#     70: 'будильник',
#     40: 'тихая комната',
# }
# key_list = list(volume_level_dict.keys())
#
# if volume_level in volume_level_dict:
#     print(f'Уровень шума соответствует {volume_level_dict[volume_level]}')
# elif volume_level > max(key_list) or volume_level < min(key_list):
#     print(f'Значение {volume_level} - находится за пределами диапазона.')
# else:
#     key_list.sort()
#
#     for index in range(len(key_list) - 1):
#
#         current_key = key_list[index]
#         next_key = key_list[index + 1]
#
#         if current_key < volume_level < next_key:
#             print(f'Уровень шума находится в диапазоне между {volume_level_dict[current_key]} и {volume_level_dict[next_key]}')
#             break

#                           Упражнение 41. Классификация треугольников
# (Решено. 21 строка)
# Все треугольники могут быть отнесены к тому или иному классу (равнобедренные, равносторонние и  разносторонние)
# на основании длин их сторон. Равносторонний треугольник характеризуется одинаковой длиной всех трех сторон,
# равнобедренный – двух сторон из трех, а у разностороннего треугольника все стороны разной длины.
# Напишите программу, которая будет запрашивать у пользователя длины всех трех сторон треугольника и
# выдавать сообщение о том, к какому типу следует его относить.


# first_side = float(input('Введите длину первой стороны: '))
# second_side = float(input('Введите длину второй стороны: '))
# third_side = float(input('Введите длину третьей стороны: '))
#
# if first_side or second_side or third_side < 1:
#     print('Длина любой из сторон не должна быть меньше "1"!')
# else:
#     if first_side == second_side and first_side == third_side:
#         print('Треугольник - равносторонний')
#     elif first_side == second_side or first_side == third_side or second_side == third_side:
#         print('Треугольник - Равнобедренный')
#     else:
#         print('Треугольник - разносторонний')



#                                       Упражнение 42. Узнать частоту по ноте
# В табл. 2.6 перечислены частоты звуков, относящихся к одной октаве, начиная с до.
# C4 261,63
# D4 293,66
# E4 329,63
# F4 349,23
# G4 392,00
# A4 440,00
# B4 493,88
# Пусть ваша программа запрашивает у пользователя обозначение ноты
# и показывает ее частоту согласно приведенной таблице. После этого вы
# можете доработать свою программу таким образом, чтобы она поддерживала все октавы, начиная
# от субконтроктавы (C0) до пятой октавы (C8). И хотя можно это реализовать путем добавления
# бесконечного количества блоков if, это будет довольно громоздким, недостаточно элегантным
# и просто неприемлемым решением данной задачи. Вместо этого при расчетах лучше использовать
# отношения между одними и теми же нотами в соседствующих октавах. К примеру, частота любой ноты октавы n будет
# составлять ровно половину от частоты той же ноты октавы n + 1.
# Используя это соотношение, вы без труда сможете добавить в  свою программу
# учет всех нот любой октавы без присутствия бесчисленных условных блоков.

#Подсказка. Пользователь должен вводить ноту вместе с номером нотации октавы.
# Начните с разделения буквы, обозначающей ноту, и цифры, соответствующей номеру
# октавы. Затем определите частоту введенной ноты по представленной выше таблице
# и разделите ее на 2**4–x , где x – номер октавы в научной нотации, введенный пользователем.
# Это позволит умножить или разделить на два число из таблицы нужное количество раз.