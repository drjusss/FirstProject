# prime_numbers_list = list()
#
# test_list_obj = list(range(1, 1001))
#
# for number in test_list_obj:
#     if number > 1:
#         for divider in range(2, number):
#             if number % divider == 0:
#                 break
#         else:
#             prime_numbers_list.append(number)
#
# print(prime_numbers_list)


#Задача 1. Степень нечётного числа
#Выведите третью степень каждого нечётного числа в диапазоне от единицы до указанного пользователем числа включительно. Для этого используйте шаг внутри функции range.

# stop_number = int(input('Введите конечное число диапазона: '))
#
# for number in range(1, stop_number + 1, 2):
#     result = number ** 3
#     print(result)


# Задача 2. Театр
# Ваню заставили пойти в театр на балет. Ему стало там настолько скучно, что он придумал себе очень странное развлечение: считать сумму номеров каждого пятого стула в рядах.
#
# Напишите программу для вычисления суммы каждого пятого числа, лежащего в диапазоне от единицы до N. Использовать условный оператор нельзя.
#
# Пример:
#
# Введите число: 21
# Номер стула: 1
# Номер стула: 6
# Номер стула: 11
# Номер стула: 16
# Номер стула: 21
# Сумма: 55

# stop_number = int(input('Введите конечное число диапазона: '))
# sum_chair = 0
#
# for chair in range(1, stop_number + 1, 5):
#     print(f'Номер стула: {chair}')
#     sum_chair += chair
#
# print(sum_chair)


# Задача 1. Прятки
# Наверное, все мы в детстве играли в прятки. И конечно же всегда был “голя” - тот, кто всех ищет. И пока все прячутся, он с закрытыми глазами ведёт обратный отсчёт секунд.
#
# Напишите программу, которая получает на вход количество секунд N и выводит все числа от N до 1 в порядке убывания. В конце выведите сообщение “Я иду искать!”
#
# Пример:
#
# Введите кол-во секунд: 5
# 5
# 4
# 3
# 2
# 1
# Я иду искать!

# countdown = int(input('Сколько секунд будет отсчитывать вода? '))
#
# for seconds in range(countdown, -1, -1):
#     print(seconds)
# print('Я иду искать!')

# Задача 2. Армия
# У офицера сегодня очень плохое настроение: он выстроил всех солдат в шеренгу и, начиная с конца,
# начал спрашивать у каждого четвёртого солдата сколько правил прописано в воинском уставе.
# Количество правил с каждым разом меняется. Если солдат ответил неверно, то применяется закон под названием “упал-отжался”.
# Количество отжиманий считается как 10 умножить на порядковый номер солдата в шеренге.
# Напишите программу, которая посчитает сколько в сумме получится таких отжиманий.
#
# Усложнение: напишите программу так, чтобы офицер начинал спрашивать не с последнего солдата в шеренге,
# а с четвертого с конца. Если солдат в шеренге слишком мало, офицер не спрашивает никого

# number_of_soldiers = int(input('Сколько солдат в шеренге? '))
# total_number_of_push_ups = 0
# number_of_rules = 150
#
# for soldier in range(number_of_soldiers - 4, 0, -4):
#     print(f'Отвечает солдат под номером: {soldier}')
#     answer = int(input('Сколько правил в уставе? '))
#     if answer != number_of_rules:
#         print('Упал, отжался!')
#         total_number_of_push_ups += soldier * 10
# print(total_number_of_push_ups)


# Задача 1. Космическая еда
# Что нужно сделать
# Ваш космический корабль потерпел крушение на пустынной планете. Еда здесь не растёт, но вы спасли из обломков 100-килограммовый мешок гречки.
# Из прошлого опыта вы знаете, что если будете экономно питаться, то у вас будет уходить по четыре килограмма гречки в месяц.
#
# Чтобы прикинуть гречневый бюджет,
# вы решили написать программу, которая выведет информацию о том, сколько килограммов гречки у вас должно быть в запасе через месяц, два и так далее, пока она не закончится.
# Используйте цикл for.
#
# Что оценивается
# Задача решена успешно, если:
#
# результат вывода соответствует условию;
# для решения использован цикл for и range c шагом;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3).

# preserved_buckwheat = 100
#
# for kilograms in range(preserved_buckwheat, -1, -4):
#     preserved_buckwheat =- 4
#     print(f'Осталось: {kilograms} килограмм')

# Задача 2. Долги
# Что нужно сделать
# «МирПрогБанк» наконец-то разделил законопослушных граждан и должников и поместил их в разные базы.
# Но банк не торопится сильно давить на неплательщиков. Операторам банка дали задание позвонить каждому пятому должнику из списка
# (нумерация начинается с нуля) и уточнить, какую сумму каждый из них задолжал банку.
#
# Напишите программу, которая получает данные о количестве должников, а затем спрашивает у каждого пятого (начиная с нуля) его долг. В конце выводится общая сумма долгов.

# number_of_debtors = int(input('Введите количество должников: '))
# amount_of_debts = 0
#
# for debtor in range(0, number_of_debtors + 1, 5):
#     print(f'Текущий должник: {debtor}')
#     amount_of_debts += int(input('Введите сумму должника: '))
# print(amount_of_debts)


# Задача 3. Микроволновка
# Что нужно сделать
# Мы разрабатываем микропрограмму — таймер обратного отсчета для микроволновых печей. Некоторым пользователям не нравится пищащий звук.
#
# Есть задача убрать звук по готовности и заменить его сообщением на LED-экране.
# В нашем случае будем выводить в консоль сообщение с обратным отсчетом в секундах от “reverse_timer” до момента готовности, то есть «0» секунд,
# и спрашивать пользователя, готов ли он забрать еду.
#
# Пользователь в любой момент может прервать режим разогрева, введя «1» (то есть ответить «Да, еда готова»),
# тогда программа выводит на экран сообщение «Ваша еда готова, можете забрать» и показывает, на какой секунде был прерван таймер.
#
# Если пользователь отвечает «0», что равноценно «Нет», то таймер уменьшается. Когда он достигнет «0» секунд, выводим сообщение «Ваша еда готова, осторожно горячo!»
#
# В данном задании используем цикл for.
#
# “reverse_timer” – переменная счетчик, значение которой запрашиваем у пользователя через функцию ввода input.
#
# Задайте время до обнуления таймера.
# Используйте цикл for.
# На каждой итерации задавайте персонажу вопрос, хочет ли он сейчас остановить разогрев или нет.
# Что оценивается
# Задача решена успешно, если:
#
# результат вывода соответствует условию;
# вывод содержит обратный отсчёт до самого конца или до того момента, когда пользователь решит остановить разогрев;
# задача решена с помощью цикла for, возможно, с range и отрицательным шагом;
# input содержит корректное приглашение для ввода;
# последней секундой считается 1;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3).
#
# reverse_timer = int(input('Введите числом, сколько секунд будет греться еда: '))
#
# for second in range(reverse_timer, -1, -1):
#
#     readiness = int(input('Хотите сейчас остановить разогрев?'))
#
#     if readiness == 1:
#         print(f'Ваша еда готова, можете забрать {second}')
#         break
#     elif readiness == 0:
#         print(f'Осталось {second} секунд')
#         continue
#     elif second == 0:
#         print('Ваша еда готова, осторожно горячo!')

# Задача 4. Среднее на отрезке
# Что нужно сделать
# Напишите программу, которая считывает с клавиатуры три числа a, b и c, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a; b], кратных числу c.
#
# Рекомендации
# Функция range(start, stop) не включает границу stop, останавливается, не доходя до неё.
#
# Что оценивается
# Задача решена успешно, если:
#
# результат вывода соответствует условию;
# вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием);
# input содержит корректное приглашение для ввода;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3).

# number_a = int(input('Введите число "А": '))
# number_b = int(input('Введите число "B": '))
# number_c = int(input('Введите число "C": '))
#
# for number in range(number_a, number_b + 1):
#     if number % number_c == 0:
#         print(number)

# sex_dict = {
# M: [Иванов Иван]
# Ж: []


# age = dict()
# sex = dict()
# course_of_study =  dict()
#
# students = [
#     {
#         'full_name': 'Марченко Александр',
#         'age': 30,
#         'sex': 'male',
#         'course_of_study': 4
#     },
#     {
#         'full_name': 'Подколзин Дмитрий',
#         'age': 32,
#         'sex': 'male',
#         'course_of_study': 4
#     },
#     {
#         'full_name': 'Никишин Сергей',
#         'age': 28,
#         'sex': 'male',
#         'course_of_study': 3
#     },
#     {
#         'full_name': 'Манохина Марина',
#         'age': 18,
#         'sex': 'female',
#         'course_of_study': 4
#     }
# ]
#
# for nested_dict in students:
#     for key, value in nested_dict.items():
#         if key == 'sex':
#             sex[value] = []
# print(sex)


# Задача 5. Функция
# Что нужно сделать
# Перед изучением функций из программирования Саша решил оживить свои знания о функциях математики.
# Помогите Саше написать программу, которая будет считать значение функции в каждой точке отрезка с нужным шагом, начиная с конца).
#
# Напишите программу, которая получает на вход начало и конец отрезка, а также шаг (отрицательный),
# а затем высчитывает функцию y в каждой точке отрезка и выводит ответ на экран с нужным шагом, начиная с конца.

# start_index = int(input('Введите начало отрезка: '))
# end_index = int(input('Введите конец отрезка: '))
# step = int(input('Введите шаг: '))
#
#
# for point in range(end_index, start_index - 1, step):
#     y = point ** 3 + 2 * point ** 2 - 4 * point + 1
#     print(f'В точке {point} функция равна {y}')

# Задача 6. Стипендия
# Что нужно сделать
# Ежемесячная стипендия студента составляет educational_grant рублей,
# а расходы на проживание превышают стипендию и составляют expenses рублей в месяц.
#
# Рост цен ежемесячно увеличивает расходы на 3%, кроме первого месяца.
# Обратите внимание, что каждый месяц цены увеличиваются на 3% относительного прошлого месяца.
#
# Составьте программу расчёта суммы денег, которую необходимо получить у родителей один раз в начале обучения,
# чтобы можно было прожить учебный год (десять месяцев), используя только эти деньги и стипендию.

# educational_grant = int(input('Введите ежемесячную стипендию: '))
# expenses = int(input('Введите ежемесячные расходы на проживание: '))
# price_rise = 0.03
# total_grant = 0
# total_expenses = 0
#
# for month in range(1, 11):
#     total_grant += educational_grant
#     total_expenses += expenses
#     expenses += expenses * price_rise
#     lacks = -(total_grant - total_expenses)
#
#     if month == 1:
#         print(f'{month}. месяц траты {expenses}, не хватает: {lacks}')
#     elif month > 1:
#         print(f'{month}. месяц траты {round(total_expenses, 1)}, не хватает: {round(lacks, 1)}')


# Задача 7. Сумма ряда чисел

# number = int(input('Введите N: '))
# result = 0
#
# for current_number in range(0, number):
#     sum_number = (-1) ** current_number * (1 / 2) ** current_number
#     result += sum_number
#
# print(result)


# Задача 8. Кинотеатр
# Что нужно сделать
# X мальчиков и Y девочек пошли в кинотеатр и купили билеты на идущие подряд места в одном ряду. Напишите программу,
# которая выдаст, как нужно сесть мальчикам и девочкам, чтобы рядом с каждым мальчиком сидела хотя бы одна девочка, а рядом с каждой девочкой — хотя бы один мальчик.
#
# На вход подаются два числа: количество мальчиков X и количество девочек Y. В ответе выведите какую-нибудь строку,
# в которой будет ровно X символов B, обозначающих мальчиков, и Y символов G, обозначающих девочек, удовлетворяющую условию задачи.
# Пробелы между символами выводить не нужно. Если рассадить мальчиков и девочек согласно условию задачи невозможно, выведите строку «Нет решения».

# boys = int(input('Введите количество мальчиков: '))
# girls = int(input('Введите количество девочек: '))
# result = str()
#
#
# while boys + girls:
#     if boys > 2 * girls or girls > 2 * boys:
#         print('Нет решения!')
#         break
#     if boys > girls:
#         result += 'BGB'
#         boys -= 2
#         girls -= 1
#
#     elif girls > boys:
#         result += 'GBG'
#         boys -= 1
#         girls -= 2
#
#     else:
#         result += 'BG'
#         boys -=1
#         girls -= 1
#
# print(result)

# Задание 1. «Я стал новым пиратом!»
# Старому капитану нужно пополнить команду, но на корабль попадут только достойные! Он отобрал десять человек.
# Те, кто крикнет слово «Карамба», попадут на борт.
#
# Что нужно сделать
# Пользователь вводит десять слов. Напишите программу, которая определяет, сколько из них совпадают со словом «Карамба».

# result = 'Карамба'
# sum_pirates = 0
#
# for word in range(10):
#     current_word = input('Введите слово, которое сказал кандидат в пираты: ')
#     if current_word.title() == result:
#         sum_pirates += 1
# print(f'Всего за 10 слов в команде оказалось {sum_pirates} пиратов')


# Задание 2. Кривой мессенджер
# Существует мессенджер, в котором иногда возникают неполадки при передаче сообщений:
# в них попадает лишний символ — звёздочка. Пользователям это надоело, поэтому они стали уходить в другие сервисы.
# Но один из них заинтересовался, на каких позициях обычно появляется звёздочка. Чтобы выяснить это, пользователю
# необходимо подготовить строки, в которых символ «*» встречается ровно один раз.
#
# Что нужно сделать
# Напишите программу, которая определяет порядковый номер звёздочки в строке.

# searching_value = '*'
# any_string = input('Введите пример для поиска индекса значения: ')
# current_index = 0
#
# for symbol in any_string:
#     if symbol == searching_value:
#         print(f'Искомое значение втретилось в {current_index} индексе.')
#         break
#     current_index += 1

# Задание 3. Театр
# В городе планируют построить театр под открытым небом, но для начала нужно оценить,
# сколько сделать рядов, сидений в них и каким должно быть расстояние между рядами.
#
# Что нужно сделать
# Напишите программу, которая получает на вход количество рядов, сидений и свободных метров между рядами,
# а затем выводит примерный макет театра на экран.

# row = int(input('Введите количество рядов: '))
# seat = int(input('Введите количество сидений в ряде: '))
# meters_between_rows = int(input('Введите количество метров между рядами: '))
#
# drow_seat = seat * '='
# drow_meters = meters_between_rows * '*'
#
# for current_row in range(row):
#     print(drow_seat,drow_meters,drow_seat)


# Задание 4. Марсоход-2
# К роботу Валли отправили «коллегу» Билли. Это его первая высадка на Марс, поэтому его тестируют
# в прямоугольном помещении размером 15 × 20 м. Марсоход высаживается в центре комнаты (в точке 8, 10),
# затем управление им передаётся оператору, то есть пользователю вашей программы.
#
# Программа спрашивает, в какую сторону оператор хочет направить робота:
# север (клавиша W),
# юг (клавиша S),
# запад (клавиша A)
# или восток (клавиша D).
# Оператор делает выбор, марсоход перемещается в эту сторону на один метр, а программа сообщает новую позицию робота.
# Если марсоход упёрся в стену, он не должен пытаться переместиться в сторону стены — в этом случае его позиция не меняется.

# width = 8
# height = 10
#
# while True:
#     step = input('Введите куда хотели бы передвинуть робота или команду для завершения теста: ')
#     if step.lower() == 'выход':
#         break
#     current_place = [width, height]
#     if width == 15:
#         if step == 'd':
#             print('Не могу двигаться в эту сторону :(')
#             continue
#     elif width == 0:
#         if step =='a':
#             print('Не могу двигаться в эту сторону :(')
#             continue
#
#     if height == 20:
#         if step == 'w':
#             print('Не могу двигаться в эту сторону :(')
#             continue
#     elif height == 0:
#         if step == 's':
#             print('Не могу двигаться в эту сторону :(')
#             continue
#
#     if step.lower() == 'w':
#         height += 1
#         print(current_place)
#     elif step.lower() == 's':
#         height -= 1
#         print(current_place)
#     elif step.lower() == 'a':
#         width -= 1
#         print(current_place)
#     elif step.lower() == 'd':
#         width += 1
#         print(current_place)
#     else:
#         print('Неверная коменда, попробуйте ещё раз')


# Задание 5. Великий и могучий
# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку.
# Ему особенно понравилась книга «Преступление и наказание». Паоло решил найти самое длинное слово в этой книге, чтобы сравнить его с аналогом на своём языке.
#
# Что нужно сделать
# Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в тексте разделяются одним пробелом.

# input_string = input('Введите строку для поиска самого длинного значения: ') + ' '
# len_words = list()
# current_word = ''
# print(input_string[-1])
#
# for symbol in input_string:
#     current_word += symbol
#     if symbol == ' ':
#         len_words.append(len(current_word) - 1)
#         current_word = ''
# print(f'Самое максимальное значение - {max(len_words)}')

# WIDTH = int(input('Введите ширину поля: '))
# HEIGHT = int(input('Введите длину поля: '))
#
# square = [
#     [' ' for _ in range(WIDTH)]
#     for _ in range(HEIGHT)
# ]
#
#
# def insert_rover(x: int, y: int) -> None:
#     for current_y in range(len(square)):
#         for current_x in range(len(square[current_y])):
#             if square[current_y][current_x] == '*':
#                 square[current_y][current_x] = ' '
#                 break
#     square[y][x] = '*'
#
#
# def print_square() -> None:
#     print('- ' * (WIDTH + 2))
#     for row in square:
#         print('|', *row, '|')
#     print('- ' * (WIDTH + 2))
#
#
# def validation_moving(x: int, y: int) -> dict[str, int | bool]:
#     result = True
#
#     if x < 0:
#         result = False
#         x = 0
#     if x > WIDTH - 1:
#         result = False
#         x = WIDTH - 1
#
#     if y < 0:
#         result = False
#         y = 0
#     if y > HEIGHT - 1:
#         result = False
#         y = HEIGHT - 1
#
#     return {
#         'result': result,
#         'x': x,
#         'y': y,
#     }
#
#
# def play() -> None:
#     current_x = 0
#     current_y = 0
#     insert_rover(x=current_x, y=current_y)
#     print_square()
#
#     while True:
#         step = input('Введите куда хотели бы передвинуть робота или команду для завершения теста: ').lower()
#
#         if step == 'выход':
#             break
#
#         if step == 'w' or step == 'ц':
#             current_y -= 1
#
#         elif step == 's' or step == 'ы':
#             current_y += 1
#
#         elif step == 'a' or step == 'ф':
#             current_x -= 1
#
#         elif step == 'd' or step == 'в':
#             current_x += 1
#
#         else:
#             print('Неверная команда, попробуйте ещё раз')
#             continue
#
#         validation_result = validation_moving(x=current_x, y=current_y)
#         if validation_result['result'] is False:
#             current_x, current_y = validation_result['x'], validation_result['y']
#             print('Я не могу пойти в эту сторону.')
#             continue
#
#         insert_rover(x=current_x, y=current_y)
#         print_square()
#
# play()


# Задание 6. Коровы
# Для коров есть 10 стойл. В каждом из них условия для животных разные, поэтому и молока они дают по-разному.
# В первом стойле производят 2 литра в день, во втором — 4, в третьем — 6, далее — 8, 10, 12, 14, 16, 18 и 20.
# При этом коровы находятся не во всех стойлах. Свободные и занятые обозначаются строкой из букв a и b, где a — свободное стойло, b — занятое.
#
# Что нужно сделать
# Напишите программу для подсчёта получаемого молока в коровнике. Важно учитывать следующее взаимодействие:
# пользователь вводит строку из десяти символов a и b. Необходимо определить, сколько в итоге будет произведено молока за день.

# cow_distribution = input('Введите строку с обозначением коров a — свободное стойло, b — занятое: ')
# total_milk = 0
# step = 2
#
# for stall in cow_distribution:
#     if stall == 'a':
#         total_milk += step
#         step += 2
#     elif stall == 'b':
#         continue
#
# print(total_milk)


# Задание 7. Метод бутерброда
# В секретном агентстве Super-Secret-no решили использовать «метод бутерброда» для шифрования переписки своих сотрудников.
# Сначала буквы слова нумеруются в таком порядке:
# первая буква получает номер 1, последняя буква — номер 2, вторая — номер 3, предпоследняя — номер 4, потом третья…
# и так для всех букв (см. рисунок). Затем все буквы записываются в шифр в порядке своих номеров.
#
# Например, слово sandwich зашифруется в shacnidw.
#
# Программист Super-Secret-no написал программу шифрования и уволился. Теперь агенты не могут понять, что они написали друг другу.
# Напишите программу-дешифратор, которая расшифровала бы введённые сообщения.
#
# Пример:
#
# Введите зашифрованное сообщение: shacnidw.
#
# Расшифрованное сообщение: sandwich.

# code = input('Введите слово для расшифровки: ')
# first_part_of_code = str()
# second_part_of_code = str()
#
# for index, symbol in enumerate(code):
#   if index % 2 != 0:
#     second_part_of_code = symbol + second_part_of_code
#   else:
#     first_part_of_code += symbol
#
# print(f'Результат расшифровки: {first_part_of_code + second_part_of_code}')

# Задание 8. Древний палиндром
# Контекст
# Вы археолог, который исследует древний свиток с таинственным посланием.
# Согласно легенде, если вы сможете прочитать палиндром из этого послания, то раскроете его секреты.
# Свиток очень постарел, и некоторые буквы стёрлись. Вам нужно разработать программу, которая поможет определить,
# является ли фрагмент послания, введённый пользователем, палиндромом. Если ваша программа справится с заданием, вы приблизитесь к разгадке древней тайны.
#
# Задача
# Напишите программу, которая определяет, является ли введённая строка палиндромом.
#
# Если введённая строка — палиндромом, выведите сообщение «Да, это палиндром!»
#
# В противном случае выведите сообщение «Нет, это не палиндром!»
#
# user_text = input('Введите текст: ').lower()
# reverse_text = str()
#
# for symbol in user_text[::-1]:
#     reverse_text += symbol
#
# if user_text == reverse_text:
#     print('Да, это палиндром!')
#
# else:
#     print('Нет, это не палиндром!')


# value = 1234
# value2 = 4321
#
# if not (value > 10 and value2 < 5):
#     print('Srabotalo uslovie')
#
# if not (not (value > 10) or not (value2 < 5)):
#     print(2)
#
# if value > 10 and value2 < 5:
#     print(3)
#
# # not (not (value > 10) or not (value2 < 5)) = value > 10 and value2 < 5
#
# a = 'В воскресенье мы едем в коттедж'
# b = 'Коттедж будет находиться в селе "Пучково"'

# class A:
#     def __init__(self, number: int):
#         self.number = number
#
# test1 = A(number=1)
#
# test2 = test1
# print(test1.number)
# print(test2.number)
#
# test1.number = 5
#
# print(test1.number)
# print(test2.number)
#
# test3 = 'hello'
# test4 = test3  # 'hello'
# test3 = test3.replace('h', '1')
# print(test3)
# print(test4)


#
class Basic:
    name = 'basic'


class Rover(Basic):
    name = 'rover'


class Botrover(Basic):
    name = 'bot_rover'


bot_rover = Botrover()
rover = Rover()
if isinstance(rover, Rover):
    print('Ровер является объектом класса ровер')
if isinstance(bot_rover, Botrover):
    print('Ботровер является объектом класса ботровер')
if isinstance(rover, Botrover):
    print('Ровер является объектом класса ботровер')
if isinstance(bot_rover, Rover):
    print('Ботровер является объектом класса ровер')

for index in range(1, 2, 1):
    print(index)